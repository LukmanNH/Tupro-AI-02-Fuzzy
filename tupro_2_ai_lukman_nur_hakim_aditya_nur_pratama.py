# -*- coding: utf-8 -*-
"""Tupro 2 AI Lukman Nur Hakim_Aditya Nur Pratama.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AQodZyp_MekN59REXYX3s3_fz1P1BSBS
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import warnings

data = pd.read_excel("https://github.com/LukmanNH/Tupro-AI-02-Fuzzy/blob/master/bengkel.xlsx?raw=true")
data.sample(10)

"""> # **Fuzzification ‚ù§**

1. |   Harga <= 3 Murah
2. |   Harga 4 - 6 Standard
3. |   Harga 7 - 8 Mahal
4. |   Harga >= 9 Sangat Mahal

# **Fungsi Keanggotaan Harga**
"""

def fuzzyPrice(x):
  price = {"Cheap": 0, "Standard": 0, "Expensive": 0, "Very Expensive": 0}

  a, b, c, d, e, f = 3, 4, 5, 6, 8, 9

  if x <= a:
      price['Cheap'] = 1
  if b <= x <= c:
      price['Standard'] = 1
  if d <= x <= e:
      price['Expensive'] = 1
  if x >= f:
      price['Very Expensive'] = 1

  if a < x <= b:
      price['Cheap'] = -(x - b) / (b - a)
  if a < x < b:
      price['Standard'] = (x - a) / (b - a)
  if c < x <= d:
      price['Standard'] = -(x - d) / (d - c)
  if c < x < d:
      price['Expensive'] = (x - c) / (d - c)
  if e < x < f:
      price['Expensive'] = -(x - f) / (f - e)
  if e < x <= f:
      price['Very Expensive'] = (x - e) / (f - e)

  return price

"""# **Visualisasi**"""

plt.figure(figsize=(11, 4))
plt.title("Fungsi Keanggotaan Harga")

plt.plot(range(11), [fuzzyPrice(x)['Cheap'] for x in range(11)], 'r')
plt.plot(range(11), [fuzzyPrice(x)['Standard'] for x in range(11)], 'y')
plt.plot(range(11), [fuzzyPrice(x)['Expensive'] for x in range(11)], 'g')
plt.plot(range(11), [fuzzyPrice(x)['Very Expensive'] for x in range(11)], 'b')

plt.plot(0, 0, 'r', linewidth=1.5, label='Cheap')
plt.plot(0, 0, 'y', linewidth=1.5, label='Standard')
plt.plot(0, 0, 'g', linewidth=1.5, label='Expensive')
plt.plot(0, 0, 'b', linewidth=1.5, label='Very Expensive')

plt.xticks(list(range(11)))
plt.xlabel("Harga (x)")

plt.legend()
plt.show()

"""# **Fungsi Keanggotaan Services**"""

def fuzzyServices(x):
    services = {'Worst': 0, 'Bad': 0, 'Good': 0, 'Perfect': 0}

    a, b, c, d, e, f = 30, 35, 60, 65, 75, 80
    
    if x <= a:
        services['Worst'] = 1
    if b <= x <= c:
        services['Bad'] = 1
    if d <= x <= e:
        services['Good'] = 1
    if x >= f:
        services['Perfect'] = 1
    if a < x <= b:
        services['Worst'] = -(x - b) / (b - a)
    if a < x < b:
        services['Bad'] = (x - a) / (b - a)
    if c < x <= d:
        services['Bad'] = -(x - d) / (d - c)
    if c < x < d:
        services['Good'] = (x - c) / (d - c)
    if e < x < f:
        services['Good'] = -(x - f) / (f - e)
    if e < x <= f:
        services['Perfect'] = (x - e) / (f - e)
        
    return services

"""# **Visualisasi**"""

plt.figure(figsize=(13, 4))
plt.title("Fungsi Keanggotaan Services")

plt.plot(range(101), [fuzzyServices(x)['Worst'] for x in range(101)], 'y')
plt.plot(range(101), [fuzzyServices(x)['Bad'] for x in range(101)], 'r')
plt.plot(range(101), [fuzzyServices(x)['Good'] for x in range(101)], 'g')
plt.plot(range(101), [fuzzyServices(x)['Perfect'] for x in range(101)], 'b')

plt.plot(0, 0, 'y', linewidth=1.5, label='Worst')
plt.plot(0, 0, 'r', linewidth=1.5, label='Bad')
plt.plot(0, 0, 'g', linewidth=1.5, label='Good')
plt.plot(0, 0, 'b', linewidth=1.5, label='Perfect')

plt.xticks(np.arange(0, 105, 5.0))
plt.xlabel("Services (x)")

plt.legend()
plt.show()

"""# **Proses Fuzzifikasi**"""

fuzzify = []

for services, prices in zip(data['servis'], data['harga']):
    fuzzy = {'Service': 0, 'Price': 0}

    fuzzy['Service'] = fuzzyServices(services)
    fuzzy['Price'] = fuzzyPrice(prices)

    fuzzify.append(fuzzy)

print("Fuzzifikasi :\n")
for i in range(0, 30, 2):
    print(" Service :", fuzzify[i]['Service'])
    print(" Price   :", fuzzify[i]['Price'], end="\n\n")

"""# **Inferensi**"""

set_rules = {
    ('Cheap', 'Worst') : 'Not Recommended',
    ('Cheap', 'Bad') : 'Recommended',
    ('Cheap', 'Good') : 'Most Recommended',
    ('Cheap', 'Perfect') : 'Most Recommended',
    ('Standard', 'Worst') : 'Not Recommended',
    ('Standard', 'Bad') : 'Recommended',
    ('Standard', 'Good') : 'Recommended',
    ('Standard', 'Perfect') : 'Most Recommended',
    ('Expensive', 'Worst') : 'Not Recommended',
    ('Expensive', 'Bad') : 'Not Recommended',
    ('Expensive', 'Good') : 'Recommended',
    ('Expensive', 'Perfect') : 'Recommended',
    ('Very Expensive', 'Worst') : 'Not Recommended',
    ('Very Expensive', 'Bad') : 'Not Recommended',
    ('Very Expensive', 'Good') : 'Not Recommended',
    ('Very Expensive', 'Perfect') : 'Recommended',
}

inference_result = []

def inference(fuzzed):
    result = {'Not Recommended': 0, "Recommended": 0, "Most Recommended": 0}

    for Services in fuzzed['Service'].keys():
        for Prices in fuzzed['Price'].keys():
            min_value = min(fuzzed['Price'][Prices], fuzzed['Service'][Services])

            output = set_rules[(Prices, Services)]

            if min_value > result[output]:
               result[output] = min_value

    return result

for fuzzed in fuzzify:
    inference_result.append(inference(fuzzed))

print("Hasil Inferensi :\n")
for i in range(0, 20, 2):
  print(f'{i:02}: ', inference_result[i])

"""# **Defuzzifikasi**"""

plt.figure(figsize=(9, 4))
plt.title("Sugeno Model Singleton")

plt.plot([50, 50], [0, 1], label="Not Recommended")
plt.plot([75, 75], [0, 1], label="Recommended")
plt.plot([100, 100], [0, 1], label="Most Recommended")
plt.xticks(np.arange(0, 110, 10.0))
plt.legend()
plt.show()

deffuzy = {'Not Recommended': 50, "Recommended": 75, "Most Recommended": 100}

def defuzzification(inference, deffuzy):
    numerator, denominator = 0, 0
    
    for output in deffuzy.keys():
        numerator += inference[output] * deffuzy[output]
        denominator += inference[output]
        
    return numerator/denominator

final = []

for inference in inference_result:
    final.append(defuzzification(inference, deffuzy))

print("Hasil Defuzifikasi:\n")
for i in range(0, 50, 5):
    print(f'Data Ke-{i+1:02} = {final[i]}')

data['Hasil'] = final
data = data.sort_values(by='Hasil',  ascending=False)[:10]
data['id'].to_excel('peringkat.xls', index=False, header=False)  
data